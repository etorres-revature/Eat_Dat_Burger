/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*****************************************!*\
  !*** ./public/assets/scripts/burger.js ***!
  \*****************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("// jQuery function to give html functionality\r\n$(function () {\r\n  //creating an on submit event for the create form that adds burgers\r\n  $(\".create-form\").on(\"submit\", (e) => {\r\n    // since the button is in a form it needs a prevent default to keep it from submitting without proper instruction\r\n    e.preventDefault();\r\n\r\n    //creating an object that has the information to bring to the controller for the new burger entered by the user\r\n    const newBurger = {\r\n      //grabbing the value from the text input\r\n      burger_name: $(\"#newBurger\").val().trim(),\r\n      //grabbing the value from the radio buttons for devoured\r\n      devoured: $(\"[name=devour]:checked\").val().trim(),\r\n    };\r\n\r\n    //using ajax to pass the information from HTML to the controller\r\n    $.ajax(\"/api/burgers\", {\r\n      //POST method\r\n      type: \"POST\",\r\n      //newBurger object with user entered information\r\n      data: newBurger,\r\n      //promise\r\n    }).then(() => {\r\n      //log to console success message\r\n      console.log(\"User added a new burger\");\r\n      //reload the page to display the new burger in the appropriate card - Ready to Eat/Devoured\r\n      location.reload();\r\n    });\r\n  });\r\n\r\n  //creating an on click event for button that toggles devoured true/false in the li\r\n  $(\".eatBurger\").on(\"click\", function (e) {\r\n    //no reason to prevent default since button is not in a form; did anyway for consistency\r\n    e.preventDefault();\r\n\r\n    //creating variables to use in the ajax call\r\n    //pulling the id using \"this\" keyword for context\r\n    const id = $(this).data(\"id\");\r\n    //grabbing the current value of devoured from the element clicked using \"this\" keyword for context\r\n    const newDevour = $(this).data(\"devourstate\");\r\n    //also getting the name of the burger\r\n    const burgerName = $(this).data(\"burgername\");\r\n    //creating a devoured state object to pass into the appropriate controller function for updating a burger\r\n    const devouredState = {\r\n      //setting the devoured state to the opposite of what it was when the button was clicked using \"!\"\r\n      devoured: !newDevour,\r\n    };\r\n\r\n    //using ajax to pass the information obtained from HTML to the controller\r\n    $.ajax(\"/api/burgers/\" + id, {\r\n      //PUT method\r\n      type: \"PUT\",\r\n      //devoured state object\r\n      data: devouredState,\r\n      //promise\r\n    }).then(() => {\r\n      //success message to log to console\r\n      console.log(`User has devoured ${burgerName}`);\r\n      //Reload the page with the burger moved from its original column to the other column depending on what the devoured value was when it was clicked\r\n      location.reload();\r\n    });\r\n  });\r\n\r\n  //creating an on click event for button that will delete a burger\r\n  $(\".trashBurger\").on(\"click\", function (e) {\r\n    //no reason to prevent default since button is not in a form; did anyway for consistency\r\n    e.preventDefault();\r\n\r\n    //creating variables to use in the ajax call\r\n    //pulling the ide using \"this\" keyword for context\r\n    const id = $(this).data(\"id\");\r\n    //also getting the name of teh burger\r\n    const burgerName = $(this).data(\"burgername\");\r\n\r\n    //using ajax to pass the information obtained form HTML to the controller\r\n    $.ajax(\"/api/burgers/\" + id, {\r\n      //DELETE method\r\n      type: \"DELETE\",\r\n      //promise\r\n    }).then(() => {\r\n      //success message to log to the console\r\n      console.log(`User has trashed ${burgerName}`);\r\n      //Reload the page with the burger that has been deleted no longer displayed in either card\r\n      location.reload();\r\n    });\r\n  });\r\n});\r\n\n\n//# sourceURL=webpack://eat_dat_burger/./public/assets/scripts/burger.js?");
/******/ })()
;